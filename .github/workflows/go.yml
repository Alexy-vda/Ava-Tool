name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Déclenchement sur les tags commençant par "v"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.2'

      - name: Build the binary
        id: build
        working-directory: ./cmd/cli
        run: |
          ARTIFACTS_DIR="build-artifacts-$(date +%s)"
          mkdir -p ${ARTIFACTS_DIR}
          echo "Utilisation du dossier: ${ARTIFACTS_DIR}"
          go build -o ${ARTIFACTS_DIR}/ava-tool -ldflags ''
          BINARY_NAME="ava-tool-${GITHUB_REF_NAME}-linux-amd64"
          cp ${ARTIFACTS_DIR}/ava-tool ${ARTIFACTS_DIR}/${BINARY_NAME}
          mv ${ARTIFACTS_DIR}/${BINARY_NAME} ../${BINARY_NAME}
          echo "::set-output name=binary_name::${BINARY_NAME}"

      - name: Install GitHub CLI (gh)
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Create GitHub Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Stocker le token dans une variable et le supprimer de l'environnement
          token="${GITHUB_TOKEN}"
          unset GITHUB_TOKEN
          # Authentifier gh en utilisant le token stocké
          echo "$token" | gh auth login --with-token
      
          # Vérifier la présence du binaire à uploader
          ls -l "${GITHUB_WORKSPACE}"
          # Créer ou éditer la release en uploadant l'asset
          gh release create "${GITHUB_REF_NAME}" "${GITHUB_WORKSPACE}/ava-tool-v1.0.5-linux-amd64" \
            --title "Release ${GITHUB_REF_NAME}" \
            --notes "Release générée automatiquement par GitHub Actions" \
            --notes-file RELEASE_NOTES.md 2>/dev/null || \
          gh release edit "${GITHUB_REF_NAME}" --add-assets "${GITHUB_WORKSPACE}/ava-tool-v1.0.5-linux-amd64"